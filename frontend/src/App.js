import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport './App.css';\n\nconst socket = io();\n\nfunction App() {\n  const [agents, setAgents] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [stats, setStats] = useState(null);\n  const [activities, setActivities] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Fetch initial data\n    fetchAgents();\n    fetchProjects();\n    fetchStats();\n\n    // Socket.IO listeners\n    socket.on('agentStatusUpdate', (data) => {\n      setAgents(prev => prev.map(agent => \n        agent.agentId === data.agentId ? { ...agent, ...data } : agent\n      ));\n      addActivity(`Agent ${data.agentId} status: ${data.status}`);\n    });\n\n    socket.on('projectCreated', (project) => {\n      setProjects(prev => [project, ...prev]);\n      addActivity(`New project created: ${project.name}`);\n    });\n\n    socket.on('newMessage', (message) => {\n      addActivity(`Message from ${message.fromAgent} to ${message.toAgent}`);\n    });\n\n    return () => {\n      socket.off('agentStatusUpdate');\n      socket.off('projectCreated');\n      socket.off('newMessage');\n    };\n  }, []);\n\n  const fetchAgents = async () => {\n    try {\n      const response = await axios.get('/api/agents');\n      setAgents(response.data);\n    } catch (error) {\n      console.error('Error fetching agents:', error);\n    }\n  };\n\n  const fetchProjects = async () => {\n    try {\n      const response = await axios.get('/api/projects');\n      setProjects(response.data);\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n    }\n  };\n\n  const fetchStats = async () => {\n    try {\n      const response = await axios.get('/api/stats');\n      setStats(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      setLoading(false);\n    }\n  };\n\n  const addActivity = (message) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setActivities(prev => [{ timestamp, message }, ...prev.slice(0, 9)]);\n  };\n\n  const getAgentIcon = (type) => {\n    switch (type) {\n      case 'frontend': return '🎨';\n      case 'backend': return '⚙️';\n      case 'fullstack': return '🔧';\n      case 'qa': return '🧪';\n      case 'devops': return '🏗️';\n      case 'orchestration': return '🎯';\n      case 'design': return '📚';\n      default: return '🤖';\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'online': return '#4CAF50';\n      case 'busy': return '#ff9800';\n      case 'offline': return '#f44336';\n      default: return '#9C27B0';\n    }\n  };\n\n  const trinityAgents = agents.filter(agent => agent.agentId.includes('500'));\n  const powerlineAgents = agents.filter(agent => agent.agentId.includes('600'));\n\n  const launchPowerLine = () => {\n    addActivity('🚀 Kevin initiated: Launch PowerLine with 17-agent coordination');\n    alert('PowerLine Launch Sequence Initiated!\\n\\n✅ Kevin Gardner - Position #1 confirmed\\n✅ 17-agent army coordinated\\n✅ Trinity Framework ready\\n✅ PowerLine agents operational\\n\\nReady for full deployment!');\n  };\n\n  const activateTrinity = () => {\n    addActivity('⚡ Trinity Framework activation sequence initiated');\n    alert('Trinity Framework Activation!\\n\\n🎨 THEO (5001) - Frontend ready\\n⚙️ MARCUS (5002) - Backend ready\\n📡 ALEX (5003) - Real-time ready\\n🧪 QUINN (5004) - QA ready\\n🎯 ACI (5005) - Orchestration ready\\n\\nBMAD v4 + PRP architecture operational!');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <h2>Loading Command Center...</h2>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard-container\">\n      {/* Header */}\n      <div className=\"header\">\n        <h1>🎯 Kevin's Complete Agent Command Center</h1>\n        <h2 style={{ color: '#FFD700' }}>17-Agent Army Management System</h2>\n        <p>Complete visibility into PowerLine + Trinity Framework agents</p>\n        <div style={{ marginTop: '15px' }}>\n          <span style={{ color: '#4CAF50' }}>●</span> System Online | \n          <span style={{ color: '#4CAF50' }}>●</span> {agents.length} Total Agents | \n          <span style={{ color: '#4CAF50' }}>●</span> ChromaDB Active\n        </div>\n      </div>\n\n      {/* System Health Overview */}\n      <div className=\"system-health\">\n        <div className=\"health-metric health-good\">\n          <h4>🟢 System Status</h4>\n          <div style={{ fontSize: '1.5rem', color: '#4CAF50' }}>Operational</div>\n          <small>All systems running</small>\n        </div>\n        <div className=\"health-metric health-good\">\n          <h4>🧠 ChromaDB</h4>\n          <div style={{ fontSize: '1.5rem', color: '#4CAF50' }}>\n            {stats?.chromadb?.status === 'connected' ? 'Connected' : 'Disconnected'}\n          </div>\n          <small>{stats?.chromadb?.collections || 0} collections</small>\n        </div>\n        <div className=\"health-metric health-warning\">\n          <h4>⚡ Trinity Load</h4>\n          <div style={{ fontSize: '1.5rem', color: '#9C27B0' }}>\n            {trinityAgents.filter(a => a.status === 'online').length}/5\n          </div>\n          <small>Trinity agents online</small>\n        </div>\n        <div className=\"health-metric health-good\">\n          <h4>🎯 PowerLine Load</h4>\n          <div style={{ fontSize: '1.5rem', color: '#4CAF50' }}>\n            {powerlineAgents.filter(a => a.status === 'online').length}/12\n          </div>\n          <small>PowerLine agents online</small>\n        </div>\n        <div className=\"health-metric health-good\">\n          <h4>📊 Projects</h4>\n          <div style={{ fontSize: '1.5rem', color: '#4CAF50' }}>\n            {stats?.projects?.active || 0}\n          </div>\n          <small>Active projects</small>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"triple-grid\">\n        <div className=\"metric-card\">\n          <h4>📊 Total Progress</h4>\n          <div className=\"metric-number\">89%</div>\n          <small>17-agent system completion</small>\n        </div>\n        <div className=\"metric-card\">\n          <h4>✅ Total Agents</h4>\n          <div className=\"metric-number\">{agents.length}</div>\n          <small>Trinity + PowerLine agents</small>\n        </div>\n        <div className=\"metric-card\">\n          <h4>🎯 Online Now</h4>\n          <div className=\"metric-number\">\n            {agents.filter(a => a.status === 'online').length}\n          </div>\n          <small>agents currently active</small>\n        </div>\n      </div>\n\n      {/* Trinity Framework Agents */}\n      <div className=\"agent-section\">\n        <div className=\"section-title\">\n          <h2>⚡ Trinity Framework Agents (5 Agents)</h2>\n          <p>BMAD v4 + PRP architecture specialists for advanced development</p>\n        </div>\n        <div className=\"agent-status\">\n          {trinityAgents.map(agent => (\n            <div key={agent.agentId} className={`agent-card agent-trinity`}>\n              <div \n                className=\"status-indicator trinity\" \n                style={{ backgroundColor: getStatusColor(agent.status) }}\n              ></div>\n              <h4>{getAgentIcon(agent.type)} {agent.name} - {agent.type.charAt(0).toUpperCase() + agent.type.slice(1)} Specialist</h4>\n              <div className=\"agent-details\">\n                <div>Port: {agent.port} | ID: {agent.agentId}</div>\n                <div>Status: {agent.status}</div>\n                <div>Last seen: {new Date(agent.lastSeen).toLocaleString()}</div>\n              </div>\n              <div className=\"progress-bar\">\n                <div \n                  className=\"progress-fill\" \n                  style={{ width: '85%', background: '#9C27B0' }}\n                ></div>\n              </div>\n              <small>Tasks completed: {agent.performance?.tasksCompleted || 0}</small>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* PowerLine Agents */}\n      <div className=\"agent-section\">\n        <div className=\"section-title\">\n          <h2>🏢 PowerLine Agent Army (12 Agents)</h2>\n          <p>Specialized agents for PowerLine development & deployment</p>\n        </div>\n        <div className=\"agent-status\">\n          {powerlineAgents.map(agent => (\n            <div key={agent.agentId} className={`agent-card agent-active`}>\n              <div \n                className=\"status-indicator active\" \n                style={{ backgroundColor: getStatusColor(agent.status) }}\n              ></div>\n              <h4>{getAgentIcon(agent.type)} {agent.name} - {agent.type.charAt(0).toUpperCase() + agent.type.slice(1)}</h4>\n              <div className=\"agent-details\">\n                <div>Port: {agent.port} | ID: {agent.agentId}</div>\n                <div>Status: {agent.status}</div>\n                <div>Last seen: {new Date(agent.lastSeen).toLocaleString()}</div>\n              </div>\n              <div className=\"progress-bar\">\n                <div \n                  className=\"progress-fill\" \n                  style={{ width: '90%', background: '#4CAF50' }}\n                ></div>\n              </div>\n              <small>Tasks completed: {agent.performance?.tasksCompleted || 0}</small>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Control Center */}\n      <div className=\"control-section\">\n        <div className=\"panel\">\n          <h3>🎮 PowerLine Control Center</h3>\n          <div style={{ margin: '15px 0' }}>\n            <button className=\"control-btn success-btn\" onClick={launchPowerLine}>\n              🚀 Launch PowerLine\n            </button>\n            <button className=\"control-btn warning-btn\" onClick={() => addActivity('⏸️ All 17 agents paused')}>\n              ⏸️ Pause All 17 Agents\n            </button>\n            <button className=\"control-btn emergency-btn\" onClick={() => addActivity('🛑 Emergency stop - All 17 agents halted')}>\n              🛑 Emergency Stop\n            </button>\n          </div>\n          <div style={{ margin: '15px 0' }}>\n            <button className=\"control-btn\" onClick={() => addActivity('🔄 Syncing all 17 agent branches')}>\n              🔄 Sync All 17 Branches\n            </button>\n            <button className=\"control-btn\" onClick={() => addActivity('🧪 Running comprehensive tests across 17 agents')}>\n              🧪 Run All Tests\n            </button>\n            <button className=\"control-btn\" onClick={() => addActivity('📊 Generating complete 17-agent progress report')}>\n              📊 Generate Report\n            </button>\n          </div>\n          <div style={{ margin: '15px 0' }}>\n            <button className=\"control-btn trinity-btn\" onClick={activateTrinity}>\n              ⚡ Activate Trinity Framework\n            </button>\n            <button className=\"control-btn success-btn\" onClick={() => addActivity('🎯 Opening live PowerLine with 17-agent coordination')}>\n              🎯 View Live PowerLine\n            </button>\n          </div>\n        </div>\n\n        <div className=\"panel\">\n          <h3>🎯 PowerLine Status</h3>\n          <div style={{ background: 'rgba(0,0,0,0.3)', padding: '15px', borderRadius: '10px' }}>\n            <div style={{ marginBottom: '10px' }}>\n              <strong style={{ color: '#4CAF50' }}>✅ Kevin Gardner - Position #1</strong>\n              <div style={{ fontSize: '0.8rem', color: '#ccc' }}>Sponsor: Lead Position - Banning, CA</div>\n            </div>\n            <div style={{ marginBottom: '10px' }}>\n              <strong style={{ color: '#4CAF50' }}>✅ Paul Barrios - Position #2</strong>\n              <div style={{ fontSize: '0.8rem', color: '#ccc' }}>Strategic Partner - Talk Fusion Expert</div>\n            </div>\n            <div style={{ marginBottom: '10px' }}>\n              <strong style={{ color: '#FFD700' }}>⏳ 3,247+ Pre-Enrollees</strong>\n              <div style={{ fontSize: '0.8rem', color: '#ccc' }}>Growing continuously</div>\n            </div>\n            <div style={{ marginBottom: '10px' }}>\n              <strong style={{ color: '#9C27B0' }}>⚡ Trinity Framework Ready</strong>\n              <div style={{ fontSize: '0.8rem', color: '#ccc' }}>5 agents standby for deployment</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Activity Feed */}\n      <div className=\"panel\">\n        <h3>📈 Recent Agent Activity (All 17 Agents)</h3>\n        <div className=\"activity-feed\">\n          {activities.map((activity, index) => (\n            <div key={index} className=\"feed-item\">\n              <span className=\"timestamp\">{activity.timestamp}</span> - {activity.message}\n            </div>\n          ))}\n          {activities.length === 0 && (\n            <div className=\"feed-item\">\n              <span className=\"timestamp\">Ready</span> - \n              <strong>System:</strong> Command center initialized and monitoring 17 agents\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Real-time Updates Panel */}\n      <div className=\"real-time-updates\">\n        <h4 style={{ color: '#4CAF50', marginBottom: '10px' }}>🔴 Live System Status</h4>\n        <div className=\"update-item\">17-agent command center active</div>\n        <div className=\"update-item\">Trinity Framework: {trinityAgents.filter(a => a.status === 'online').length}/5 online</div>\n        <div className=\"update-item\">PowerLine agents: {powerlineAgents.filter(a => a.status === 'online').length}/12 online</div>\n        <div className=\"update-item\">Kevin monitoring all systems</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;