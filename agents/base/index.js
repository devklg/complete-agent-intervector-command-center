const express = require('express');\nconst { ChromaClient } = require('chromadb');\nconst axios = require('axios');\nrequire('dotenv').config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\nconst agentId = process.env.AGENT_ID;\nconst agentType = process.env.AGENT_TYPE || 'general';\nconst chromaUrl = process.env.CHROMA_URL || 'http://localhost:8000';\n\nlet chroma;\n\n// Initialize ChromaDB client\nconst initChroma = async () => {\n  try {\n    chroma = new ChromaClient({ path: chromaUrl });\n    console.log(`🧠 ${agentId} connected to ChromaDB at ${chromaUrl}`);\n    return true;\n  } catch (error) {\n    console.error(`❌ ${agentId} ChromaDB connection error:`, error.message);\n    return false;\n  }\n};\n\n// Register agent in directory\nconst registerAgent = async () => {\n  if (!chroma) return false;\n  \n  try {\n    const collection = await chroma.getOrCreateCollection({ name: 'agent_directory' });\n    \n    await collection.upsert({\n      ids: [agentId],\n      documents: [`Agent ${agentId} - ${agentType} specialist`],\n      metadatas: [{\n        agentId,\n        agentType,\n        status: 'online',\n        port,\n        capabilities: getCapabilities(),\n        timestamp: new Date().toISOString(),\n        lastSeen: new Date().toISOString()\n      }]\n    });\n    \n    console.log(`✅ ${agentId} registered in agent directory`);\n    return true;\n  } catch (error) {\n    console.error(`❌ ${agentId} registration error:`, error.message);\n    return false;\n  }\n};\n\n// Get agent capabilities based on type\nconst getCapabilities = () => {\n  const capabilities = {\n    frontend: ['React', 'Vue', 'HTML/CSS', 'JavaScript', 'UI/UX'],\n    backend: ['Express.js', 'Node.js', 'API Development', 'Database Design'],\n    fullstack: ['Frontend', 'Backend', 'Database', 'API Integration'],\n    qa: ['Testing', 'Automation', 'Quality Assurance', 'Bug Detection'],\n    devops: ['Docker', 'CI/CD', 'Deployment', 'Infrastructure'],\n    orchestration: ['Agent Coordination', 'Task Management', 'System Integration'],\n    design: ['Documentation', 'Technical Writing', 'Content Creation']\n  };\n  \n  return capabilities[agentType] || ['General AI Assistant'];\n};\n\n// Check for tasks in ChromaDB\nconst checkForTasks = async () => {\n  if (!chroma) return;\n  \n  try {\n    const collection = await chroma.getCollection({ name: 'agent_message_log' });\n    const results = await collection.query({\n      queryTexts: [agentId],\n      nResults: 5,\n      where: { status: 'pending' }\n    });\n    \n    if (results.documents[0] && results.documents[0].length > 0) {\n      console.log(`📋 ${agentId} found ${results.documents[0].length} pending tasks`);\n      \n      // Process each task\n      for (let i = 0; i < results.ids[0].length; i++) {\n        const taskId = results.ids[0][i];\n        const task = results.documents[0][i];\n        const metadata = results.metadatas[0][i];\n        \n        console.log(`🔄 ${agentId} processing task: ${task}`);\n        \n        // Simulate task processing\n        await processTask(taskId, task, metadata);\n        \n        // Mark task as completed\n        await markTaskCompleted(taskId);\n      }\n    }\n  } catch (error) {\n    if (!error.message.includes('does not exist')) {\n      console.error(`❌ ${agentId} task check error:`, error.message);\n    }\n  }\n};\n\n// Process a specific task\nconst processTask = async (taskId, task, metadata) => {\n  const processingTime = Math.random() * 2000 + 1000; // 1-3 seconds\n  \n  console.log(`⚡ ${agentId} executing: ${task}`);\n  \n  // Simulate processing work\n  await new Promise(resolve => setTimeout(resolve, processingTime));\n  \n  // Log completion\n  console.log(`✅ ${agentId} completed task in ${(processingTime/1000).toFixed(1)}s`);\n  \n  // Update performance metrics\n  await updatePerformanceMetrics(processingTime);\n};\n\n// Mark task as completed\nconst markTaskCompleted = async (taskId) => {\n  if (!chroma) return;\n  \n  try {\n    const collection = await chroma.getCollection({ name: 'agent_message_log' });\n    // Note: ChromaDB doesn't support direct updates, so we'd need to delete and re-add\n    // For now, we'll just log the completion\n    console.log(`✅ ${agentId} marked task ${taskId} as completed`);\n  } catch (error) {\n    console.error(`❌ ${agentId} task completion error:`, error.message);\n  }\n};\n\n// Update performance metrics\nconst updatePerformanceMetrics = async (processingTime) => {\n  if (!chroma) return;\n  \n  try {\n    const collection = await chroma.getOrCreateCollection({ name: 'agent_performance' });\n    \n    await collection.add({\n      ids: [`${agentId}_${Date.now()}`],\n      documents: [`Performance metric for ${agentId}`],\n      metadatas: [{\n        agentId,\n        processingTime: processingTime,\n        timestamp: new Date().toISOString(),\n        success: true\n      }]\n    });\n  } catch (error) {\n    console.error(`❌ ${agentId} performance update error:`, error.message);\n  }\n};\n\n// Send heartbeat to update last seen\nconst sendHeartbeat = async () => {\n  if (!chroma) return;\n  \n  try {\n    const collection = await chroma.getOrCreateCollection({ name: 'agent_directory' });\n    \n    await collection.upsert({\n      ids: [agentId],\n      documents: [`Agent ${agentId} - ${agentType} specialist - Active`],\n      metadatas: [{\n        agentId,\n        agentType,\n        status: 'online',\n        port,\n        capabilities: getCapabilities(),\n        timestamp: new Date().toISOString(),\n        lastSeen: new Date().toISOString()\n      }]\n    });\n  } catch (error) {\n    console.error(`❌ ${agentId} heartbeat error:`, error.message);\n  }\n};\n\n// Express middleware\napp.use(express.json());\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    agentId,\n    agentType,\n    port,\n    capabilities: getCapabilities(),\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Agent info endpoint\napp.get('/info', (req, res) => {\n  res.json({\n    agentId,\n    agentType,\n    port,\n    capabilities: getCapabilities(),\n    status: 'online',\n    version: '1.0.0',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Task assignment endpoint\napp.post('/tasks', async (req, res) => {\n  const { task, priority = 'medium', dueDate } = req.body;\n  \n  console.log(`📝 ${agentId} received new task: ${task}`);\n  \n  try {\n    // Process the task\n    await processTask(`task_${Date.now()}`, task, { priority, dueDate });\n    \n    res.json({\n      success: true,\n      message: `Task assigned to ${agentId}`,\n      agentId,\n      task,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message,\n      agentId\n    });\n  }\n});\n\n// Start agent\nconst startAgent = async () => {\n  console.log(`🚀 Starting ${agentId} (${agentType}) on port ${port}`);\n  \n  // Initialize ChromaDB connection\n  const chromaConnected = await initChroma();\n  \n  if (chromaConnected) {\n    // Register agent\n    await registerAgent();\n    \n    // Start periodic task checking (every 10 seconds)\n    setInterval(checkForTasks, 10000);\n    \n    // Send heartbeat every 30 seconds\n    setInterval(sendHeartbeat, 30000);\n  }\n  \n  // Start Express server\n  app.listen(port, () => {\n    console.log(`✅ ${agentId} running on port ${port}`);\n    console.log(`🧠 ChromaDB: ${chromaConnected ? 'Connected' : 'Disconnected'}`);\n    console.log(`🎯 Capabilities: ${getCapabilities().join(', ')}`);\n  });\n};\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  console.log(`🛑 ${agentId} shutting down...`);\n  \n  if (chroma) {\n    try {\n      const collection = await chroma.getOrCreateCollection({ name: 'agent_directory' });\n      await collection.upsert({\n        ids: [agentId],\n        documents: [`Agent ${agentId} - ${agentType} specialist - Offline`],\n        metadatas: [{\n          agentId,\n          agentType,\n          status: 'offline',\n          port,\n          capabilities: getCapabilities(),\n          timestamp: new Date().toISOString(),\n          lastSeen: new Date().toISOString()\n        }]\n      });\n    } catch (error) {\n      console.error(`❌ ${agentId} shutdown error:`, error.message);\n    }\n  }\n  \n  process.exit(0);\n});\n\n// Start the agent\nstartAgent().catch(error => {\n  console.error(`❌ ${agentId} startup error:`, error);\n  process.exit(1);\n});"